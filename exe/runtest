#!/usr/bin/env ruby
lib = File.expand_path("../../lib", __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require "devtools"
require "runtest"
require "find"
require "pp"

module RunTest
  def self.run_command(command)
    puts "COMMAND> #{command}" if Options.verbose >= 4
    system command unless Options.dryrun
  end

  files = { jest: [], mocha: [], diff: [] }

  RunTest::OptParse.parse(ARGV)

  pp Options if Options.verbose >= 5

  if Options.changed
    files[:diff] = %x(#{Options.commands.diff}).split("\n").collect do |f|
      f =~ /-spec/ ? File.basename(f, ".js") : "#{File.basename(f, ".js")}-spec"
    end.uniq.compact

    DevTools::Utils.die "No modified spec files found" if files[:diff].empty? && ARGV.empty?
  end

  if !files[:diff].empty? || ARGV.length > 0
    [files[:diff], ARGV].flatten.compact.uniq.each do |arg|
      found = false

      puts "looking for tests matching \"#{arg}\"" if Options.verbose > 1

      Find.find(Options.basedir) do |path|
        if FileTest.directory?(path)
          if File.basename(path)[0] == ?.
            Find.prune # Don't look any further into this directory.
          else
            next
          end
        else
          if path =~ /_*(spec|test)s?_*\/.*#{arg}.*/
            files[$1 =~ /test/ ? :jest : :mocha].push path
            found = true
          end
        end
      end

      puts "No tests found matching #{arg}" unless found
    end

    [:jest, :mocha].each do |suite|
      next unless Options[suite]

      if files[suite].length > 0
        if Options.verbose > 2
          puts "\nRunning #{suite.capitalize} on..."
          puts "    #{files[suite].join("\n    ")}\n\n"
        else
          puts "\nRunning #{files[suite].length} #{suite.capitalize} test(s)" if Options.verbose > 0
        end

        run_command "#{Options.commands[suite]} #{files[suite].join(" ")}"
      end
    end

    exit files[:jest].length > 0 || files[:mocha].length > 0 ? 0 : 1

  else
    [:jest, :mocha].each do |suite|
      if Options[suite]
        puts "Running full #{suite.capitalize} test suite" if Options.verbose > 0
        run_command Options.commands[suite.to_s + "_full"]
      end
    end
  end
end # module RunTest

